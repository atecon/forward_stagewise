<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="fsreg" minver="2020b" lives-in-subdir="true">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2020-08-03</date>
<description>Forward-stagewise sparse regression estimates</description>
<tags>C13 C52</tags>
<label>Forward Stagewise</label>
<menu-attachment>MAINWIN/Model/LinearModels</menu-attachment>
<help>
pdfdoc:fsreg.pdf
</help>
<depends count="2">
ridge string_utils </depends>
<provider>ridge</provider>
<gretl-function name="fsreg" type="bundle">
 <params count="3">
  <param name="y" type="series" const="true">
<description>Dep. variable</description>
  </param>
  <param name="X" type="list" const="true">
<description>Candidates</description>
  </param>
  <param name="opts" type="bundle" optional="true"/>
 </params>
<code>/* Main function for forward stagewise regression. */
if $datatype != 1       # cross-sectional or panel
  smpl --no-missing y X
elif $datatype == 2
  smpl --contiguous y X
endif
bundle self = default_fsreg_opts(y, X)
if exists(opts)
  self = opts + self         # override defaults
endif
# Initilizations
string self.yname = argname(y)
strings self.Xnames = varnames(X)
initialize(&amp;self, y, X)
stdize_y_and_x(&amp;self)
fsreg_estimator(&amp;self)
post_process(&amp;self)
# Handle intercept: non-scaled as &quot;coeff&quot; is already re-scaled
matrix resids = get_residuals({y}, {self.X_without_const}, self.coeff)
if self.with_constant
  scalar self.resid_mean = meanc(resids)
  self.coeff = self.resid_mean | self.coeff
endif
matrix self.coeff_nonzero = get_nonzero_rescaled_coeffs(self)
attach_coefficient_row_labels(&amp;self)
# FIXME: I could not found how to determine the degrees of freedom for fsreg estimator
scalar self.num_parameters = rows(vec(self.coeff_nonzero))
add_yhat_and_uhat_to_bundle(y, X, &amp;self)
scalar self.uhat_variance = sd(self.uhat)
compute_r_squares(&amp;self)
list self.X_final = add_selected_predictors_to_list(X, self)
cleanup_bundle(&amp;self)
return self
</code>
</gretl-function>
<gretl-function name="print_fsreg_results" type="void">
 <params count="1">
  <param name="self" type="bundle"/>
 </params>
<code>/* Print results. */
if self.verbose
  printf &quot;\nForward-stagewise regression results (no inference)&quot;
  printf &quot;\n-------------------------------------------------------\n&quot;
  strings label_str = defarray(&quot;const&quot;) + get_names_of_nonzero_coeffs(self) + defarray(&quot;Number of iterations&quot;, &quot;Correl. w. residuals&quot;, &quot;S.E. of regression&quot;, &quot;R-squared&quot;)
  matrix extra = self.actual_num_iterations |self.rho_values[self.actual_num_iterations] | sd(self.uhat) | self.r2_qcorr
  scalar k = rows(self.coeff_nonzero)
  matrix bhat = self.coeff_nonzero ~ mshape(NA, k, 1)
  modprint bhat label_str extra
endif
</code>
</gretl-function>
<gretl-function name="plot_rho_values" type="void">
 <params count="3">
  <param name="self" type="bundle"/>
  <param name="filename" type="string" optional="true">
<description>Path + filename to store figure</description>
  </param>
  <param name="absolute_values" type="bool" default="1" const="true"/>
 </params>
<code>/* Plot correlation coefficients. */
string title = &quot;Forward stagewise correlation values&quot;
string ylabel = (absolute_values == FALSE) ? &quot;Correlations w. residuals&quot; : &quot;Absol. correlations w. residuals&quot;
scalar fontsize = 12
string filename = (exists(filename)) ? filename : &quot;display&quot;
matrix mplot = (absolute_values == TRUE) ? abs(self.rho_values) : self.rho_values
plot mplot
  options with-lines time-series
  literal set linetype 1 lc rgb &quot;black&quot; lw 1.5
  literal set nokey
  literal set grid
  printf &quot;set title \&quot;%s\&quot; font \&quot;, %d\&quot;&quot;, title, fontsize
  printf &quot;set xlabel 'Iterations' font \&quot;, %d\&quot;&quot;, fontsize
  printf &quot;set ylabel '%s' font \&quot;, %d\&quot;&quot;, ylabel, fontsize
end plot --output=&quot;@filename&quot;
</code>
</gretl-function>
<gretl-function name="plot_coefficient_paths" type="void">
 <params count="3">
  <param name="self" type="bundle"/>
  <param name="filename" type="string" optional="true">
<description>Path + filename to store figure</description>
  </param>
  <param name="ylog_scale" type="bool" default="0" const="true"/>
 </params>
<code>/* Plot coefficient paths. */
string title = &quot;Forward stagewise coefficient paths&quot;
string ylabel = (ylog_scale == FALSE) ? &quot;Standardized coefficients&quot; : &quot;Standardized coefficients (in logarithms)&quot;
scalar fontsize = 12
string filename = (exists(filename)) ? filename : &quot;display&quot;
string ylog_scale_str = (ylog_scale == TRUE) ? &quot;--ylogscale=10&quot; : &quot;&quot;
matrix mplot = self.betas
cnameset(mplot, self.Xnames)
plot mplot
  options with-lines time-series single-yaxis @ylog_scale_str
  #literal set linetype 3 lc rgb &quot;#0000ff&quot;
  #literal set nokey
  literal set grid
  printf &quot;set title \&quot;%s\&quot; font \&quot;, %d\&quot;&quot;, title, fontsize
  printf &quot;set xlabel 'Iterations' font \&quot;, %d\&quot;&quot;, fontsize
  printf &quot;set ylabel '%s' font \&quot;, %d\&quot;&quot;, ylabel, fontsize
  printf &quot;set yrange[%g:%g]&quot;, min(mplot)*1.1, max(mplot)*1.1
end plot --output=&quot;@filename&quot;
</code>
</gretl-function>
<gretl-function name="fsreg_gui" type="bundle" pkg-role="gui-main">
 <params count="8">
  <param name="y" type="series" const="true">
<description>Dep. variable</description>
  </param>
  <param name="X" type="list" const="true">
<description>Candidates</description>
  </param>
  <param name="eta" type="scalar" min="0.0001" max="0.9999" default="0.05" const="true">
<description>Learning rate</description>
  </param>
  <param name="max_num_iterations" type="int" min="20" default="2000" const="true">
<description>Max. number of iterations</description>
  </param>
  <param name="early_stopping_rounds" type="int" min="10" default="30" const="true">
<description>Early stopping rounds</description>
  </param>
  <param name="plot_coefficient_paths" type="bool" default="0" const="true">
<description>Plot coefficient paths</description>
  </param>
  <param name="plot_rho_values" type="bool" default="0" const="true">
<description>Plot correlation w. residuals</description>
  </param>
  <param name="verbose" type="int" min="0" max="2" default="1" const="true">
<description>Print details</description>
<labels count="3">
"quiet" "details" "more details" </labels>
  </param>
 </params>
<code>/* GUI wrapper for fsreg(). */
bundle model = null
scalar model.verbose = verbose
scalar model.eta = eta
scalar model.max_num_iterations = max_num_iterations
scalar model.early_stopping_rounds = early_stopping_rounds
bundle model = fsreg(y, X, model)
print_fsreg_results(model)
if plot_rho_values == TRUE
  plot_rho_values(model)
endif
if plot_coefficient_paths == TRUE
  plot_coefficient_paths(model)
endif
return model
</code>
</gretl-function>
<gretl-function name="default_fsreg_opts" type="bundle" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="X" type="list" const="true"/>
 </params>
<code># Set default values
bundle self = null
scalar self.verbose = 1
scalar self.eta = 0.05         # kind of learning rate
scalar self.max_num_iterations = 10000
scalar self.early_stopping_rounds = 50
return self
</code>
</gretl-function>
<gretl-function name="stdize_y_and_x" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Demeaning series y and list X and compute associated std.-errors. */
matrix self.my = cdemean({self.y}, TRUE)
scalar self.ysd = sdc({self.y})
matrix self.mX = cdemean({self.X_without_const}, TRUE)
matrix self.Xsd = sdc({self.X_without_const})           # gives row vector
</code>
</gretl-function>
<gretl-function name="initialize" type="void" private="1">
 <params count="3">
  <param name="self" type="bundleref"/>
  <param name="y" type="series" const="true"/>
  <param name="X" type="list" const="true"/>
 </params>
<code>/* Some initalizations. */
scalar self.T = $nobs
series self.y = y
list self.X_without_const = X - const
scalar self.with_constant = nelem(self.X_without_const) &lt; nelem(X) ? TRUE : FALSE
strings self.Xnames_wo_constant = (self.with_constant == TRUE) ? strdrop(self.Xnames, &quot;const&quot;) : self.Xnames
# Initializations of variables for estimator function
scalar self.resid_mean = 0
matrix self.rho_values = mshape(NA, self.max_num_iterations, 1)
matrix self.betas = zeros(self.max_num_iterations, nelem(self.X_without_const))
scalar self.actual_num_iterations = NA
</code>
</gretl-function>
<gretl-function name="add_selected_predictors_to_list" type="list" private="1">
 <params count="2">
  <param name="X" type="list" const="true"/>
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Add selected preditors to list. */
list L = (self.with_constant == TRUE) ? const : null
S = get_names_of_nonzero_coeffs(self)
loop foreach i S
  list L += genseries(&quot;$i&quot;, X.$i)
endloop
return L
</code>
</gretl-function>
<gretl-function name="add_yhat_and_uhat_to_bundle" type="void" private="1">
 <params count="3">
  <param name="y" type="series" const="true"/>
  <param name="X" type="list" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/* Add final fitted values and residuals to bundle. */
series self.yhat = lincomb(X, self.coeff)
series self.uhat = y - self.yhat
</code>
</gretl-function>
<gretl-function name="compute_r_squares" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Wrapper calling functions for computing R^2. Currently, we only know that stuff is statistically correct for statistics &quot;r2_qcorr&quot;. */
matrix r_squares = r2_stats(self.my, {self.yhat}, self.num_parameters)
self.r2_qcorr = r_squares[1]
#self.r2_qcorr_adj = r_squares[2]          # depends on self.num_parameters
#self.r2_scores = r_squares[3]
</code>
</gretl-function>
<gretl-function name="cleanup_bundle" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Drop unnecessary stuff from bundle */
delete self.Xsd
delete self.ysd
delete self.mX
delete self.y
delete self.my
delete self.num_parameters
delete self.X_without_const
delete self.resid_mean
</code>
</gretl-function>
<gretl-function name="attach_coefficient_row_labels" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Attach row labels to vector of point estimates. */
if self.with_constant
  S = defarray(&quot;const&quot;) + get_names_of_nonzero_coeffs(self)
else
  S = get_names_of_nonzero_coeffs(self)
endif
rnameset(self.coeff_nonzero, S)
rnameset(self.coeff, self.Xnames)
</code>
</gretl-function>
<gretl-function name="post_process" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Wrapper for some post-processing. */
get_valid_rho_values(&amp;self)
cumsum_coefficient_paths(&amp;self)
matrix self.coeff = get_rescaled_coeffs(self)
</code>
</gretl-function>
<gretl-function name="cumsum_coefficient_paths" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Cumulate iterative coefficient estimates, restrict vector length and attach column labels for each regressor (needed for optional plotting. */
self.betas = cum(self.betas[1:self.actual_num_iterations,])
cnameset(self.betas, self.Xnames_wo_constant)
</code>
</gretl-function>
<gretl-function name="get_valid_rho_values" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Restrict vector to length equal to the number of actual iterations. */
self.rho_values = self.rho_values[1:self.actual_num_iterations]
</code>
</gretl-function>
<gretl-function name="get_rescaled_coeffs" type="matrix" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Retrieve all final point estimates and rescale. */
return self.betas[self.actual_num_iterations,]' .* (self.ysd ./ self.Xsd')
</code>
</gretl-function>
<gretl-function name="get_nonzero_rescaled_coeffs" type="matrix" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Retrieve final non-zero point estimates. */
matrix bhat_all = self.coeff
matrix mask = (self.coeff .!= 0)
return selifr(self.coeff, mask)
</code>
</gretl-function>
<gretl-function name="forward_stagewise" type="scalar" private="1">
 <params count="2">
  <param name="self" type="bundle" const="true"/>
  <param name="rho" type="scalar" const="true">
<description>Correlation coefficient</description>
  </param>
 </params>
<code>/* Compute forward stagewise &quot;delta&quot; value. */
return self.eta * sgn(rho)
</code>
</gretl-function>
<gretl-function name="update_beta" type="scalar" private="1">
 <params count="2">
  <param name="beta" type="scalar" const="true"/>
  <param name="delta" type="scalar" const="true"/>
 </params>
<code>/* Update regression coefficient. */
return beta + delta
</code>
</gretl-function>
<gretl-function name="update_residuals" type="matrix" private="1">
 <params count="3">
  <param name="residuals" type="matrix" const="true"/>
  <param name="delta" type="scalar" const="true"/>
  <param name="x" type="matrix" const="true">
<description>j-th regressor</description>
  </param>
 </params>
<code>/* Update regression coefficient. */
return residuals - delta * x
</code>
</gretl-function>
<gretl-function name="get_max_correlation" type="scalar" private="1">
 <params count="2">
  <param name="yX" type="matrix" const="true"/>
  <param name="position" type="scalarref">
<description>j-th regressor</description>
  </param>
 </params>
<code>/* Compute correlations between &quot;y&quot; and all exogenous variables (&quot;X&quot;). Return maximum of absolute correlations. */
matrix correlations = mcorr(yX)[2:, 1]      # assume that 1st column refers to endogenous
scalar position = imaxc(abs(correlations))
return correlations[position]
</code>
</gretl-function>
<gretl-function name="print_early_stopping_reached" type="void" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* */
if self.verbose &gt; 0
  printf &quot;\nInfo: No improvement in correlation for the last %d iterations.\n Early stopping applies.\n&quot;, self.early_stopping_rounds
endif
</code>
</gretl-function>
<gretl-function name="print_iteration_details" type="void" private="1">
 <params count="3">
  <param name="self" type="bundle" const="true"/>
  <param name="iteration" type="int" const="true"/>
  <param name="rho" type="scalar" const="true">
<description>Correlation coeff.</description>
  </param>
 </params>
<code>/* */
if self.verbose == 2
  printf &quot;\nInfo: Iteration %d out of %d: correlation coeff. = %g.\n&quot;, iteration, self.max_num_iterations, rho
endif
</code>
</gretl-function>
<gretl-function name="fsreg_estimator" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Actual implementation of the boosting-like forward stagewise algorithm. */
matrix yX = self.my ~ self.mX
scalar n_rounds_no_improvement = 0
scalar rho_value_former = NA
loop i = 1..self.max_num_iterations
  scalar position = NA
  scalar self.actual_num_iterations = $i
  scalar col = (i &gt; 1) ? i-1 : 1
  self.rho_values[i] = get_max_correlation(yX, &amp;position)
  print_iteration_details(self, $i, self.rho_values[i])
  scalar delta = forward_stagewise(self, self.rho_values[i])
  self.betas[i, position] = update_beta(self.betas[i, position], delta)
  yX[,1] = update_residuals(yX[,1], delta, self.mX[, position])
  # early stopping
  n_rounds_no_improvement += (i &gt; 1 &amp;&amp; self.rho_values[i-1] &lt;= self.rho_values[i]) ? 1 : n_rounds_no_improvement
  if n_rounds_no_improvement == self.early_stopping_rounds
    print_early_stopping_reached(self)
    break
  endif
endloop
</code>
</gretl-function>
<gretl-function name="get_names_of_nonzero_coeffs" type="strings" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Retrieve names variables for which point estimates are non-zero. */
matrix bhat_all = vec(self.betas[self.actual_num_iterations,])
scalar n_nonzero_vars = sum(bhat_all .!= 0)
strings selected_vars = array(n_nonzero_vars)
scalar counter = 1
loop i = 1..rows(bhat_all)
  if bhat_all[i] != 0
    selected_vars[counter] = self.Xnames_wo_constant[i]
    counter++
  endif
endloop
return selected_vars
</code>
</gretl-function>
<sample-script>
set verbose off
clear
include fsreg.gfn


scalar runEX = 3		# select an example

# Select an example
if runEX == 1
    open australia.gdt -q -p    # time-series data set

    # define the variables
    series LHS = ldiff(PAU)
    list RHS = const LHS(-1 to -2) IUS(-1 to -2)  IAU(-1 to -2)

elif runEX == 2
    # SIMULATION
    nulldata 750
    set seed 1234
    setobs 1 1 --time-series
    scalar k = 35
    series e = normal()
    series LHS = 1
    series LHS = 4.5 + 0.8*LHS(-1) - 0.4*LHS(-2) + e
    matrix X = mnormal($nobs, k)		# further exogenous
    list RHS = const LHS(-1 to -6)		# arbtrary lags of the endogenous
    loop i=1..cols(X) -q
        RHS += genseries(sprintf(&quot;S%d&quot;, $i), X[,i])
    endloop

elif runEX == 3
    open mroz.gdt -q -p     # cross-sectional data set
    series LHS = wage
    list RHS = const dataset

    RHS -= LHS wage     # drop lhs varianle
endif

# Run standard OLS as benchmark
ols LHS RHS



# Run estimation
bundle opts = null
scalar opts.eta = 0.1                  # learning rate
scalar opts.max_num_iterations = 5000   # max. number of boosting rounds
bundle B = fsreg(LHS, RHS, opts)

print_fsreg_results(B)      # Print estimation results
stop

list X_final = B.X_final    # Retrieve list of selected regressors
X_final

# Retrieve point estimates
eval B.coeff            # retrieve point estimates of all variables
eval B.coeff_nonzero    # retrieve point estimates of selected variables

series yhat = B.yhat    # Retrieve fitted values

# Plot realizations vs. fitted values
gnuplot LHS yhat --output=&quot;display&quot;

# Plot correlations as a function of iterations
plot_rho_values(B)

# Plot coefficient paths
plot_coefficient_paths(B)


/* Activate if wished
# Define own parameter set
bundle opts = null
scalar opts.verbose = 1
scalar opts.eta = 0.001                  # learning rate
scalar opts.max_num_iterations = 5000   # max. number of boosting rounds
scalar opts.early_stopping_rounds = 20  # stop if no improvement after n rounds

# Run estimation
bundle B = fsreg(LHS, RHS, opts)
print_fsreg_results(B)      # Print estimation results
*/
</sample-script>
</gretl-function-package>
</gretl-functions>
