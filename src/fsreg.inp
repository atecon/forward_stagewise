function bundle default_fsreg_opts (const series y,
                                const list X)

    # Set default values
    bundle self = null
    scalar self.verbose = 1
    scalar self.eta = 0.05         # kind of learning rate
    scalar self.max_num_iterations = 10000
    scalar self.early_stopping_rounds = 50

    return self
end function


function void stdize_y_and_x (bundle *self)
    /* Demeaning series y and list X and compute associated std.-errors. */
    matrix my = cdemean({self.y})
    scalar self.ysd = sdc(my)
    self.my = my ./ self.ysd
    matrix mX = cdemean({self.X_without_const})
    matrix self.Xsd = sdc(mX)           # gives row vector
    self.mX = mX ./ self.Xsd
end function


function void initialize (bundle *self, const series y, const list X)
    /* Some initalizations. */

    scalar self.T = $nobs
    series self.y = y
    list self.X_without_const = X - const
    scalar self.with_constant = nelem(self.X_without_const) < nelem(X) ? TRUE : FALSE
    strings self.Xnames_wo_constant = (self.with_constant == TRUE) ? strdrop(self.Xnames, "const") : self.Xnames

    # Initializations of variables for estimator function
    scalar self.resid_mean = 0
    matrix self.rho_values = mshape(NA, self.max_num_iterations, 1)
    matrix self.betas = zeros(self.max_num_iterations, nelem(self.X_without_const))
    scalar self.actual_num_iterations = NA
end function


function bundle fsreg_gui (const series y "Dep. variable",
                           const list X "Candidates",
                           const scalar eta[0.0001:0.9999:0.05] "Learning rate",
                           const int max_num_iterations[20::2000] "Max. number of iterations",
                           const int early_stopping_rounds[10::30] "Early stopping rounds",
                           const bool plot_coefficient_paths[0] "Plot coefficient paths",
                           const bool plot_rho_values[0] "Plot correlation w. residuals",
                           const int verbose[0:2:1] "Print details" {"quiet", "details", "more details"})
    /* GUI wrapper for fsreg(). */

    bundle model = null
    scalar model.verbose = verbose
    scalar model.eta = eta
    scalar model.max_num_iterations = max_num_iterations
    scalar model.early_stopping_rounds = early_stopping_rounds

    bundle model = fsreg(y, X, model)
    print_fsreg_results(model)

    if plot_rho_values == TRUE
        plot_rho_values(model)
    endif

    if plot_coefficient_paths == TRUE
        plot_coefficient_paths(model)
    endif

    return model
end function


function bundle fsreg (const series y "Dep. variable",
                       const list X "Candidates",
                       bundle opts[null])

    /* Main function for forward stagewise regression. */

    if $datatype != 1       # cross-sectional or panel
        smpl --no-missing y X
    elif $datatype == 2
        smpl --contiguous y X
    endif

    bundle self = default_fsreg_opts(y, X)
    if exists(opts)
        self = opts + self         # override defaults
    endif

    # Initilizations
    string self.yname = argname(y)
    strings self.Xnames = varnames(X)
    initialize(&self, y, X)

    stdize_y_and_x(&self)
    fsreg_estimator(&self)
    post_process(&self)

    # Handle intercept: non-scaled as "coeff" is already re-scaled
    matrix resids = get_residuals({y}, {self.X_without_const}, self.coeff)
    if self.with_constant
        scalar self.resid_mean = meanc(resids)
        self.coeff = self.resid_mean | self.coeff
    endif
    matrix self.coeff_nonzero = get_nonzero_rescaled_coeffs(self)

    attach_coefficient_row_labels(&self)

    # FIXME: I could not found how to determine the degrees of freedom for fsreg estimator
    scalar self.num_parameters = rows(vec(self.coeff_nonzero))

    add_yhat_and_uhat_to_bundle(y, X, &self)
    scalar self.uhat_variance = sd(self.uhat)
    compute_r_squares(&self)

    list self.X_final = add_selected_predictors_to_list(X, self)

    cleanup_bundle(&self)

    return self
end function


function list add_selected_predictors_to_list (const list X, const bundle self)
    /* Add selected preditors to list. */

    list L = (self.with_constant == TRUE) ? const : null
    S = get_names_of_nonzero_coeffs(self)

    loop foreach i S
        list L += genseries("$i", X.$i)
    endloop

    return L
end function


function void add_yhat_and_uhat_to_bundle (const series y,
                                            const list X,
                                            bundle *self)
    /* Add final fitted values and residuals to bundle. */

    series self.yhat = get_y_pred({X}, self.coeff)  # considering "const" if
    series self.uhat = y - self.yhat
end function


function void compute_r_squares (bundle *self)
    /* Wrapper calling functions for computing R^2. Currently, we only know that stuff is statistically correct for statistics "r2_qcorr". */

    matrix r_squares = r2_stats(self.my, {self.yhat}, self.num_parameters)
    self.r2_qcorr = r_squares[1]
    #self.r2_qcorr_adj = r_squares[2]          # depends on self.num_parameters
    #self.r2_scores = r_squares[3]
end function


function void cleanup_bundle (bundle *self)
    /* Drop unnecessary stuff from bundle */

    delete self.Xsd
    delete self.ysd
    delete self.mX
    delete self.y
    delete self.my
    delete self.num_parameters
    delete self.X_without_const
    delete self.resid_mean
end function


function void attach_coefficient_row_labels (bundle *self)
    /* Attach row labels to vector of point estimates. */

    if self.with_constant
        S = defarray("const") + get_names_of_nonzero_coeffs(self)
    else
        S = get_names_of_nonzero_coeffs(self)
    endif
    rnameset(self.coeff_nonzero, S)
    rnameset(self.coeff, self.Xnames)
end function


function void post_process (bundle *self)
    /* Wrapper for some post-processing. */

    get_valid_rho_values(&self)
    cumsum_coefficient_paths(&self)
    matrix self.coeff = get_rescaled_coeffs(self)
end function


function void cumsum_coefficient_paths (bundle *self)
    /* Cumulate iterative coefficient estimates, restrict vector length and attach column labels for each regressor (needed for optional plotting. */

    self.betas = cum(self.betas[1:self.actual_num_iterations,])
    cnameset(self.betas, self.Xnames_wo_constant)
end function


function void get_valid_rho_values (bundle *self)
    /* Restrict vector to length equal to the number of actual iterations. */
    self.rho_values = self.rho_values[1:self.actual_num_iterations]
end function


function matrix get_rescaled_coeffs (const bundle self)
    /* Retrieve all final point estimates and rescale. */

    return self.betas[self.actual_num_iterations,]' .* (self.ysd ./ self.Xsd')
end function



function matrix get_nonzero_rescaled_coeffs (const bundle self)
    /* Retrieve final non-zero point estimates. */

    matrix bhat_all = self.coeff
    matrix mask = (self.coeff .!= 0)

    return selifr(self.coeff, mask)
end function


function scalar forward_stagewise (const bundle self,
                                    const scalar rho "Correlation coefficient")
    /* Compute forward stagewise "delta" value. */
    return self.eta * sgn(rho)
end function


function scalar update_beta (const scalar beta, const scalar delta)
    /* Update regression coefficient. */

    return beta + delta
end function


function matrix update_residuals (const matrix residuals,
                                const scalar delta,
                                const matrix x "j-th regressor")
    /* Update regression coefficient. */

    return residuals - delta * x
end function


function scalar get_max_correlation (const matrix yX, scalar *position "j-th regressor")
    /* Compute correlations between "y" and all exogenous variables ("X"). Return maximum of absolute correlations. */

    matrix correlations = mcorr(yX)[2:, 1]      # assume that 1st column refers to endogenous
    scalar position = imaxc(abs(correlations))

    return correlations[position]
end function

function void print_early_stopping_reached (const bundle self)
    /* */

    if self.verbose > 0
        printf "\nInfo: No improvement in correlation for the last %d iterations.\n Early stopping applies.\n", self.early_stopping_rounds
    endif
end function



function void print_iteration_details (const bundle self,
                                       const int iteration,
                                       const scalar rho "Correlation coeff.")
    /* */

    if self.verbose == 2
        printf "\nInfo: Iteration %d out of %d: correlation coeff. = %g.\n", iteration, self.max_num_iterations, rho
    endif
end function


function void fsreg_estimator (bundle *self)
    /* Actual implementation of the boosting-like forward stagewise algorithm. */

    matrix yX = self.my ~ self.mX

    scalar n_rounds_no_improvement = 0
    scalar rho_value_former = NA

    loop i = 1..self.max_num_iterations
        scalar position = NA
        scalar self.actual_num_iterations = $i
        scalar col = (i > 1) ? i-1 : 1

        self.rho_values[i] = get_max_correlation(yX, &position)
        print_iteration_details(self, $i, self.rho_values[i])
        scalar delta = forward_stagewise(self, self.rho_values[i])

        self.betas[i, position] = update_beta(self.betas[i, position], delta)
        yX[,1] = update_residuals(yX[,1], delta, self.mX[, position])

        # early stopping
        n_rounds_no_improvement += (i > 1 && self.rho_values[i-1] <= self.rho_values[i]) ? 1 : n_rounds_no_improvement

        if n_rounds_no_improvement == self.early_stopping_rounds
            print_early_stopping_reached(self)
            break
        endif
    endloop
end function


function void plot_coefficient_paths (bundle self,
                                    string filename[null] "Path + filename to store figure",
                                    const bool ylog_scale[0])
    /* Plot coefficient paths. */

    string title = "Forward stagewise coefficient paths"
    string ylabel = (ylog_scale == FALSE) ? "Standardized coefficients" : "Standardized coefficients (in logarithms)"
    scalar fontsize = 12
    string filename = (exists(filename)) ? filename : "display"
    string ylog_scale_str = (ylog_scale == TRUE) ? "--ylogscale=10" : ""
    matrix mplot = self.betas
    cnameset(mplot, self.Xnames)

    plot mplot
       options with-lines time-series single-yaxis @ylog_scale_str
       #literal set linetype 3 lc rgb "#0000ff"
       #literal set nokey
       literal set grid
       printf "set title \"%s\" font \", %d\"", title, fontsize
       printf "set xlabel 'Iterations' font \", %d\"", fontsize
       printf "set ylabel '%s' font \", %d\"", ylabel, fontsize
       printf "set yrange[%g:%g]", min(mplot)*1.1, max(mplot)*1.1
   end plot --output="@filename"
end function


function void plot_rho_values (bundle self,
                                string filename[null] "Path + filename to store figure",
                                const bool absolute_values[1])
    /* Plot correlation coefficients. */

    string title = "Forward stagewise correlation values"
    string ylabel = (absolute_values == FALSE) ? "Correlations w. residuals" : "Absol. correlations w. residuals"
    scalar fontsize = 12
    string filename = (exists(filename)) ? filename : "display"
    matrix mplot = (absolute_values == TRUE) ? abs(self.rho_values) : self.rho_values

    plot mplot
       options with-lines time-series
       literal set linetype 1 lc rgb "black" lw 1.5
       literal set nokey
       literal set grid
       printf "set title \"%s\" font \", %d\"", title, fontsize
       printf "set xlabel 'Iterations' font \", %d\"", fontsize
       printf "set ylabel '%s' font \", %d\"", ylabel, fontsize
   end plot --output="@filename"
end function


function strings get_names_of_nonzero_coeffs (const bundle self)
    /* Retrieve names variables for which point estimates are non-zero. */

    matrix bhat_all = vec(self.betas[self.actual_num_iterations,])

    scalar n_nonzero_vars = sum(bhat_all .!= 0)
    strings selected_vars = array(n_nonzero_vars)

    scalar counter = 1
    loop i = 1..rows(bhat_all)
        if bhat_all[i] != 0
            selected_vars[counter] = self.Xnames_wo_constant[i]
            counter++
        endif
    endloop

    return selected_vars
end function


function void print_fsreg_results (bundle self)
    /* Print results. */

    if self.verbose
        printf "\nForward-stagewise regression results (no inference)"
        printf "\n-------------------------------------------------------\n"
        strings label_str = defarray("const") + get_names_of_nonzero_coeffs(self) + defarray("Number of iterations", "Correl. w. residuals", "S.E. of regression", "R-squared")
        matrix extra = self.actual_num_iterations |self.rho_values[self.actual_num_iterations] | sd(self.uhat) | self.r2_qcorr
        scalar k = rows(self.coeff_nonzero)
        matrix bhat = self.coeff_nonzero ~ mshape(NA, k, 1)

        modprint bhat label_str extra
    endif
end function


/*
############ TODO: DROP LATER
function matrix get_y_pred (const matrix mX,
                            const matrix bhat)
    # Helper function for computing fitted values
    return mX * bhat
end function

function matrix get_residuals (const matrix my,
                               const matrix mX,
                               const matrix bhat)
    #/* Helper function for computing residuals
    return my - get_y_pred(mX, bhat)
end function

function matrix r2_stats (matrix y_true "T by 1 vector of realizations",
                          matrix y_pred "T by 1 vector of estimated values",
                          scalar num_parameters "No. of parameters")
    # Helper function for computing different R-square statistics.

    matrix R = NA * zeros(3,1)
    matrix y_true = vec(y_true)
    matrix y_pred = vec(y_pred)

    if rows(y_true) != rows(y_pred)
        printf "\nError: Vectors y_true and y_pred are of different length.\n"
        return NA
    endif
    if rows(y_pred) < 2
        printf "\nError: R^2 score not well-defined with less than two samples.\n"
        return NA
    endif
    if isconst(y_true)
        printf "\nError: Vector y_true is constant.\n"
        return NA
    endif

    R[1] = r2_qcorr(&y_true, &y_pred)
    #R[2] = r2_qcorr_adjusted(R[1], rows(y_true), num_parameters)
    #R[3] = r2_score(&y_true, &y_pred)
    rnameset(R, "r2_qcorr r2_qcorr_adj r2_score")

    return R
end function

function scalar r2_qcorr (const matrix *y_true,
                          const matrix *y_pred)
    # R-square based on quadratic correlation.
    return corr(y_true, y_pred)^2
end function

function scalar r2_qcorr_adjusted (scalar r2 "R-square from r2_qcorr()",
                                   int n "Sample length",
                                   scalar num_parameters "No. of ridge parameters used")
    # Adjusted R-square based on quadratic correlation

    scalar nominator = n - 1
    scalar denominator = n - num_parameters - 1

    return 1 - (1-r2) * nominator/denominator
end function


function scalar get_residuals_variance (const matrix resids,
                                        const int T)
    # Helper function for computing the residuals' variance
    return resids'resids / T
end function

*/
