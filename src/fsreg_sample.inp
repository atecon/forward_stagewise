set verbose off
clear
include fsreg.gfn


scalar runEX = 3		# select an example

# Select an example
if runEX == 1
    open australia.gdt -q -p    # time-series data set

    # define the variables
    series LHS = ldiff(PAU)
    list RHS = const LHS(-1 to -2) IUS(-1 to -2)  IAU(-1 to -2)

elif runEX == 2
    # SIMULATION
    nulldata 750
    set seed 1234
    setobs 1 1 --time-series
    scalar k = 35
    series e = normal()
    series LHS = 1
    series LHS = 4.5 + 0.8*LHS(-1) - 0.4*LHS(-2) + e
    matrix X = mnormal($nobs, k)		# further exogenous
    list RHS = const LHS(-1 to -6)		# arbtrary lags of the endogenous
    loop i=1..cols(X) -q
        RHS += genseries(sprintf("S%d", $i), X[,i])
    endloop

elif runEX == 3
    open mroz.gdt -q -p     # cross-sectional data set
    series LHS = wage
    list RHS = const dataset

    RHS -= LHS wage     # drop lhs varianle
endif

# Run standard OLS as benchmark
ols LHS RHS



# Run estimation
bundle B = fsreg(LHS, RHS)

print_fsreg_results(B)      # Print estimation results

list X_final = B.X_final    # Retrieve list of selected regressors
X_final

# Retrieve point estimates
eval B.coeff            # retrieve point estimates of all variables
eval B.coeff_nonzero    # retrieve point estimates of selected variables

series yhat = B.yhat    # Retrieve fitted values

# Plot realizations vs. fitted values
gnuplot LHS yhat --output="display"

# Plot correlations as a function of iterations
plot_rho_values(B)

# Plot coefficient paths
plot_coefficient_paths(B)


/* Activate if wished
# Define own parameter set
bundle opts = null
scalar opts.verbose = 1
scalar opts.eta = 0.001                  # learning rate
scalar opts.max_num_iterations = 5000   # max. number of boosting rounds
scalar opts.early_stopping_rounds = 20  # stop if no improvement after n rounds

# Run estimation
bundle B = fsreg(LHS, RHS, opts)
print_fsreg_results(B)      # Print estimation results
*/
