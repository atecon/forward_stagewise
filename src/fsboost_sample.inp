set verbose off
clear
include fsboost.gfn

scalar runEX = 1		# select an example

# Select an example
if runEX == 1
    open australia.gdt -q -p    # time-series data set

    # define the variables
    series LHS = ldiff(PAU)
    list RHS = const LHS(-1 to -2) IUS(-1 to -2)  IAU(-1 to -2)

    # Optional: set learning rate a bit higher
    bundle opts = _(learning_rate = 0.025)

elif runEX == 2
    # SIMULATION
    nulldata 750
    set seed 1234
    setobs 1 1 --time-series
    scalar k = 35
    series e = normal()
    series LHS = 1
    series LHS = 4.5 + 0.8*LHS(-1) - 0.4*LHS(-2) + e
    matrix X = mnormal($nobs, k)		# further exogenous
    list RHS = const LHS(-1 to -6)		# arbitrary lags of the endogenous
    loop i=1..cols(X) -q
        RHS += genseries(sprintf("S%d", $i), X[,i])
    endloop

    bundle opts = null

elif runEX == 3
    open mroz87.gdt -q -p     # cross-sectional data set

    series LHS = WW
    list RHS = const dataset
    RHS -= LHS WW     # drop lhs variable

    # Set a low learning rate
    bundle opts = _(learning_rate = 0.025)

elif runEX == 4             # example taken from Allin's regls pckg.

    # An artificial example with more regressors than observations,
    # where the actually relevant regressors are known. With an s
    # value (lambda/lambda-max) of around 0.3, ADMM is pretty good
    # at picking out the relevant ones. Note that no seed is set, so
    # results will differ somewhat from run to run.

    n = 80  # observations
    k = 120 # regressors
    matrix X = mnormal(n,k)
    u = mnormal(n, 1)
    matrix sel = {5, 20, 37, 60, 70}
    matrix y = sumr(X[,sel]) + u
    printf "Truly non-zero coefficients:\n"
    eval sel

    nulldata n --preserve
    series LHS = y
    list RHS = null
    loop i=1..k -q
      RHS += genseries(sprintf("x%d", i), X[,i])
    endloop

    # Set a low learning rate and low early stopping threshold
    bundle opts = _(early_stopping_strategy = "residual_corr_rel")
endif

# Run standard OLS as benchmark
if nelem(RHS) < $nobs
    ols LHS RHS
endif


# Run estimation
bundle B = fsreg(LHS, RHS, opts)
#print B
print_fsboost_results(B)      # Print estimation results

list X_final = B.X_final    # Retrieve list of selected regressors
eval varnames(X_final)

# Retrieve point estimates
eval B.coeff            # retrieve point estimates of all variables
eval B.coeff_nonzero    # retrieve point estimates of selected variables

series yhat = B.yhat    # Retrieve fitted values

# Plot realizations vs. fitted values
#gnuplot LHS yhat --output="display"

# Plot correlations as a function of iterations
plot_rho_values(B)

# Plot coefficient paths
plot_coefficient_paths(B)

# Prediction
smpl 1 10
matrix preds = fsboost_predict(RHS, B)
print preds



/* Activate if wished
# Define own parameter set
bundle opts = null
scalar opts.verbose = 1
scalar opts.learning_rate = 0.001                  # learning rate
scalar opts.max_num_iterations = 5000   # max. number of boosting rounds
scalar opts.early_stopping_rounds = 20  # stop if no improvement after n rounds

# Run estimation
bundle B = fsreg(LHS, RHS, opts)
print_fsboost_results(B)      # Print estimation results
*/
